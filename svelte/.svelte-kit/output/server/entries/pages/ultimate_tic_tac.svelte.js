import { c as create_ssr_component, v as validate_component, i as is_promise, n as noop } from '../../_app/immutable/chunks/index-6d4e55ab.js';
import { P as Page } from '../../_app/immutable/chunks/Page-33e15f72.js';

let wasm;

const cachedTextEncoder = new TextEncoder('utf-8');

(typeof cachedTextEncoder.encodeInto === 'function'
    ? function (arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
}
    : function (arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
});

const cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });

cachedTextDecoder.decode();

async function load(module, imports) {
    if (typeof Response === 'function' && module instanceof Response) {
        if (typeof WebAssembly.instantiateStreaming === 'function') {
            try {
                return await WebAssembly.instantiateStreaming(module, imports);

            } catch (e) {
                if (module.headers.get('Content-Type') != 'application/wasm') {
                    console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);

                } else {
                    throw e;
                }
            }
        }

        const bytes = await module.arrayBuffer();
        return await WebAssembly.instantiate(bytes, imports);

    } else {
        const instance = await WebAssembly.instantiate(module, imports);

        if (instance instanceof WebAssembly.Instance) {
            return { instance, module };

        } else {
            return instance;
        }
    }
}

function getImports() {
    const imports = {};
    imports.wbg = {};

    return imports;
}

function finalizeInit(instance, module) {
    wasm = instance.exports;
    init.__wbindgen_wasm_module = module;


    return wasm;
}

async function init(input) {
    if (typeof input === 'undefined') {
        input = new URL('ultimate_tic_tac_bg.wasm', import.meta.url);
    }
    const imports = getImports();

    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {
        input = fetch(input);
    }

    const { instance, module } = await load(await input, imports);

    return finalizeInit(instance, module);
}

/* src/components/UltimateTicTac/UltimateTicTac.svelte generated by Svelte v3.49.0 */

const UltimateTicTac = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return `${validate_component(Page, "Page").$$render($$result, {}, {}, {
		default: () => {
			return `<h1>Hello</h1>`;
		}
	})}`;
});

/* src/routes/ultimate_tic_tac.svelte generated by Svelte v3.49.0 */

const Ultimate_tic_tac = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	const loadWasm = init();

	return `${(function (__value) {
		if (is_promise(__value)) {
			__value.then(null, noop);
			return ``;
		}

		return (function () {
			return `
    ${validate_component(UltimateTicTac, "UltimateTicTac").$$render($$result, {}, {}, {})}
`;
		})();
	})(loadWasm)}`;
});

export { Ultimate_tic_tac as default };
